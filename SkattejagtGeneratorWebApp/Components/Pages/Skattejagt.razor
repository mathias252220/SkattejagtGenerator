@page "/Skattejagt"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ILogicFactory logicFactory

<PageTitle>Skattejagt</PageTitle>

<br><br><br>

<div class="row">
	<div class="col-12">
		<h1 style="text-align:center">Lav din egen skattejagt!</h1>
	</div>
</div>

<br><br><br>

<div class="row">
	<div class="col-3"/>

	<div class="col-6">
		<div class="row">
			<div class="col-4">
				<label role="status">Antal grupper: @groups.Count</label>
			</div>
			<div class="col-2">
				<button class="btn btn-primary" @onclick="AddGroup">+</button>
			</div>
			<div class="col-2">
				<button class="btn btn-primary" @onclick="SubtractGroup">-</button>
			</div>
			<div class="col-4"/>
		</div>
	</div>

	<div class="col-3"/>
</div>

<br>

<div class="row">
	<div class="col-3"/>

	<div class="col-6">
		<div class="row" style="align-items:center">
			<div class="col-4">
				<label  role="status">Antal poster: @outposts.Count</label>
			</div>
			<div class="col-2">
				<button class="btn btn-primary" @onclick="AddOutpost">+</button>
			</div>
			<div class="col-2">
				<button class="btn btn-primary" @onclick="SubtractOutpost">-</button>
			</div>
			<div class="col-4" />
		</div>
	</div>

	<div class="col-3"/>
</div>

<br>

<div class="row">
	<div class="col-3"/>

	<div class="col-6">
		<EditForm class="content" method="post" Model="outposts" OnValidSubmit="PrintPDF">
			<ObjectGraphDataAnnotationsValidator />
		
			<div class="row">
				<div class="col-4">
					<select class="form-select" style="font-size: 1vw" @bind="gradeInput" required>
						<option selected value="">Vælg klassetrin</option>
						<option value="GradeZero">0. klasse</option>
						<option value="GradeOne">1. klasse</option>
						<option value="GradeTwo">2. klasse</option>
						<option value="GradeThree">3. klasse</option>
						<option value="GradeFour">4. klasse</option>
					</select>
				</div>
			</div>

			<div class="row">

				<div class="col-6">
					@foreach (OutpostModel outpost in outposts)
					{
						
							@if (outposts.IndexOf(outpost) < 5)
							{
								<br>
								<p>Post @(outposts.IndexOf(outpost) + 1)</p>
								<InputText style="font-size: 1vw" @bind-Value="outpost.Name" placeholder="Navn på post" class="form-control" />
								<ValidationMessage For="() => outpost.Name" />
							}
					}
				</div>

				<div class="col-6">
					@foreach (OutpostModel outpost in outposts)
					{
						@if (outposts.IndexOf(outpost) >= 5)
						{
							<br>
							<p>Post @(outposts.IndexOf(outpost) + 1)</p>
							<InputText style="font-size: 1vw" @bind-Value="outpost.Name" placeholder="Navn på post" class="form-control" />
							<ValidationMessage For="() => outpost.Name" />
						}
					}
				</div>
			</div>

			<br>

			<div class="row">
				<div class="col-12">
					<button style="font-size: 1vw" class="btn btn-primary" type="submit">Generer skattejagt</button>
				</div>
			</div>
		</EditForm>	
	</div>

	<div class="col-3"/>
</div>


@code {
	List<OutpostModel> outposts = new List<OutpostModel>
	{
		new OutpostModel{},
		new OutpostModel{}
	};

	List<GroupModel> groups = new List<GroupModel>
	{
		new GroupModel{}
	};

	string? gradeInput;

	ILogic? logic;

	private void AddOutpost()
	{
		if (outposts.Count < 10)
		{
			outposts.Add(new OutpostModel{});
		}
	}

	private void AddGroup()
	{
		if (groups.Count < 10)
		{
			groups.Add(new GroupModel{});
		}
	}

	private void SubtractOutpost()
	{
		if (outposts.Count > 2)
		{
			outposts.RemoveAt(outposts.Count - 1);
		}
	}

	private void SubtractGroup()
	{
		if (groups.Count > 1)
		{
			groups.RemoveAt(groups.Count - 1);
		}
	}

	private async Task PrintPDF()
	{
		logic = logicFactory.Create(gradeInput);
		KeyPageModel keyPage = logic.CreateKeyPage();

		foreach (OutpostModel outpost in outposts)
		{

			logic.PopulateOutpost(outpost, keyPage);
		}

		foreach (GroupModel group in groups)
		{
			group.groupNumber = groups.IndexOf(group) + 1;
			group.firstOutpost = group.groupNumber;
		}

		PDFCreator pdfCreator = new PDFCreator();

		var skattejagt = pdfCreator.PrintFullPDF(keyPage, outposts, groups);

		byte[] data = skattejagt.GeneratePdf();

		await JS.InvokeVoidAsync("saveByteArray", "Skattejagt.pdf", data);
	}
}
