@page "/SkattejagtGenerator"
@using Microsoft.AspNetCore.Mvc
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ILogicFactory logicFactory



<h3>SkattejagtGenerator</h3>
<br>

<div class="chooseGrade">
	<select class="form-select w-25" @bind="gradeInput">
		<option selected>Vælg klassetrin</option>
		<option value="GradeZero">0. klasse</option>
		<option value="GradeOne">1. klasse</option>
		<option value="GradeTwo">2. klasse</option>
		<option value="GradeThree">3. klasse</option>
		<option value="GradeFour">4. klasse</option>
	</select>
</div>

<br>

<div class="groupButtons">
	<label role="status">Antal grupper: @numberOfGroups</label>
	<button class="btn btn-primary" @onclick="AddGroup">+</button>
	<button class="btn btn-primary" @onclick="SubtractGroup">-</button>
</div>

<br>

<div class="outpostButtons">
	<label role="status">Antal poster: @numberOfOutposts</label>
	<button class="btn btn-primary" @onclick="AddOutpost">+</button>
	<button class="btn btn-primary" @onclick="SubtractOutpost">-</button>

	@for (int i = 0; i < numberOfOutposts; i++)
	{
		<br>
		int local = i;
		<p>Post @(local + 1)</p>
		<InputText @bind-Value="outposts[local]" placeholder="Navn på post" class="form-control w-25" />
	}
</div>

<br>

<div class="generateTreasureHunt">
		<button class="btn btn-primary" @onclick="PrintPDF">Generer skattejagt</button>
</div>


@code {
	List<string> outposts = new List<string> {string.Empty};

	List<GroupModel> groups = new List<GroupModel>
	{
		new GroupModel { groupNumber = 1, firstOutpost = 1 }
	};

	int numberOfGroups = 1;
	int numberOfOutposts = 1;
	string? gradeInput;

	ILogic? logic;

	private void AddOutpost()
	{
		if (numberOfOutposts < 10)
		{
			numberOfOutposts++;
			outposts.Add(string.Empty);
		}
	}
	private void AddGroup()
	{
		if (numberOfGroups < 10)
		{
			numberOfGroups++;
			groups.Add(new GroupModel { groupNumber = numberOfGroups, firstOutpost = numberOfGroups });
		}
	}

	private void SubtractOutpost()
	{
		if (numberOfOutposts > 1)
		{
			numberOfOutposts--;
			outposts.RemoveAt(outposts.Count - 1);
		}
	}

	private void SubtractGroup()
	{
		if (numberOfGroups > 1)
		{
			numberOfGroups--;
			groups.RemoveAt(groups.Count - 1);
		}
	}

	private async Task PrintPDF()
	{
		logic = logicFactory.Create(gradeInput);
		KeyPageModel keyPage = logic.CreateKeyPage();
		List<OutpostModel> outpostsFinal = new();
		foreach (string name in outposts)
		{
			OutpostModel tempOutpost = logic.CreateOutpost(name, keyPage);
			outpostsFinal.Add(tempOutpost);
		}
		
		PDFCreator pdfCreator = new PDFCreator();

		var skattejagt = pdfCreator.PrintFullPDF(keyPage, outpostsFinal, groups);

		byte[] data = skattejagt.GeneratePdf();

		await JS.InvokeVoidAsync("saveByteArray", "Skattejagt.pdf", data);
	}

}
