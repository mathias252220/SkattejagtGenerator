@page "/SkattejagtGenerator"
@rendermode InteractiveServer
@inject IJSRuntime JS

<h3>SkattejagtGenerator</h3>

<label role="status">Antal poster: @numberOfOutposts</label>
<button class="btn btn-primary" @onclick="AddOutpost">+</button>
<button class="btn btn-primary" @onclick="SubtractOutpost">-</button>

<SfDropDownList TValue="string" TItem="GradeModel" Placeholder="Vælg klassetrin" DataSource="@Grades">
	<DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
</SfDropDownList>


<EditForm Model="outposts" OnValidSubmit="PrintPDF">
	

	<InputText @bind-Value="numberOfGroupsInput" placerholder="Antal grupper" class="form-control" />
	
	@for (int i = 0; i < numberOfOutposts; i++)
	{
		int local = i;
		<p>Post @(local + 1)</p>
		<InputText @bind-Value="outposts[local]" placeholder="Navn på post" class="form-control"/>
	}

	<button class="btn btn-primary" type="submit">Generer skattejagt</button>
</EditForm>

@code {
	private List<string> outposts = new();
	List<GradeModel> Grades = new()
	{
		new GradeModel() {ID = "0", Text = "0. klasse" },
		new GradeModel() {ID = "1+2", Text = "1. og 2. klasse" }
	};
	string numberOfGroupsInput = string.Empty;
	private int numberOfOutposts = 0;

	private void AddOutpost()
	{
		numberOfOutposts++;
		outposts.Add(string.Empty);
	}

	private void SubtractOutpost()
	{
		numberOfOutposts--;
		outposts.RemoveAt(outposts.Count - 1);
	}

	private async Task PrintPDF()
	{

		LogicOneTwo logic = new();
		int numberOfGroups = int.Parse(numberOfGroupsInput);
		List<GroupModel> groups = new();
		for (int i = 0; i < numberOfGroups; i++)
		{
			GroupModel group = new();
			group.groupNumber = i + 1;
			group.firstOutpost = i + 1;
			groups.Add(group);
		}
		KeyPageModel keyPage = logic.CreateKeyPage();
		List<OutpostModel> outpostsFinal = new();
		foreach (string name in outposts)
		{
			OutpostModel tempOutpost = logic.CreateOutpost(name, keyPage);
			outpostsFinal.Add(tempOutpost);
		}
		QuestPDF.Settings.License = LicenseType.Community;
		PDFCreator pdfCreator = new PDFCreator();

		var skattejagtTemp = pdfCreator.PrintFullPDF(keyPage, outpostsFinal, groups);
		skattejagtTemp.GeneratePdf("skattejagt.pdf");

		var fileStream = GetFileStream();
		var fileName = "skattejagt.pdf";

		using var streamRef = new DotNetStreamReference(stream: fileStream);

		await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
	}

	private Stream GetFileStream()
	{
		return File.OpenRead("skattejagt.pdf");
	}
}
