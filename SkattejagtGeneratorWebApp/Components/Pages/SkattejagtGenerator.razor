@page "/SkattejagtGenerator"
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ILogicFactory logicFactory

<h3>SkattejagtGenerator</h3>
<br>

<div class="chooseGrade">
	<select class="form-select w-25" @bind="gradeInput">
		<option selected>Vælg klassetrin</option>
		<option value="GradeZero">0. klasse</option>
		<option value="GradeOne">1. klasse</option>
		<option value="GradeTwo">2. klasse</option>
		<option value="GradeThree">3. klasse</option>
		<option value="GradeFour">4. klasse</option>
	</select>
</div>

<br>

<div class="groupButtons">
	<label role="status">Antal grupper: @groups.Count</label>
	<button class="btn btn-primary" @onclick="AddGroup">+</button>
	<button class="btn btn-primary" @onclick="SubtractGroup">-</button>
</div>

<br>

<div class="outpostButtons">
	<label role="status">Antal poster: @outposts.Count</label>
	<button class="btn btn-primary" @onclick="AddOutpost">+</button>
	<button class="btn btn-primary" @onclick="SubtractOutpost">-</button>
</div>

<div class="form">
	<EditForm method="post" Model="outposts" OnValidSubmit="PrintPDF">
		<ObjectGraphDataAnnotationsValidator/>

		@foreach(OutpostModel outpost in outposts)
		{
			<br>
			<p>Post @(outposts.IndexOf(outpost) + 1)</p>
			<InputText @bind-Value="outpost.Name" placeholder="Navn på post" class="form-control w-25" />
			<ValidationMessage For="() => outpost.Name"/>
		}

		<br>

		<button class="btn btn-primary" type="submit">Generer skattejagt</button>

	</EditForm>
</div>

@code {
	List<OutpostModel> outposts = new List<OutpostModel>
	{
		new OutpostModel{},
		new OutpostModel{}
	};

	List<GroupModel> groups = new List<GroupModel>
	{
		new GroupModel{}
	};

	string? gradeInput;

	ILogic? logic;

	private void AddOutpost()
	{
		if (outposts.Count < 10)
		{
			outposts.Add(new OutpostModel{});
		}
	}

	private void AddGroup()
	{
		if (groups.Count < 10)
		{
			groups.Add(new GroupModel{});
		}
	}

	private void SubtractOutpost()
	{
		if (outposts.Count > 2)
		{
			outposts.RemoveAt(outposts.Count - 1);
		}
	}

	private void SubtractGroup()
	{
		if (groups.Count > 1)
		{
			groups.RemoveAt(groups.Count - 1);
		}
	}

	private async Task PrintPDF()
	{
		logic = logicFactory.Create(gradeInput);
		KeyPageModel keyPage = logic.CreateKeyPage();

		foreach (OutpostModel outpost in outposts)
		{

			logic.PopulateOutpost(outpost, keyPage);
		}

		foreach (GroupModel group in groups)
		{
			group.groupNumber = groups.IndexOf(group) + 1;
			group.firstOutpost = group.groupNumber;
		}

		PDFCreator pdfCreator = new PDFCreator();

		var skattejagt = pdfCreator.PrintFullPDF(keyPage, outposts, groups);

		byte[] data = skattejagt.GeneratePdf();

		await JS.InvokeVoidAsync("saveByteArray", "Skattejagt.pdf", data);
	}
}
